[workspace]
members = ["multichain-client", "server"]
resolver = "2"

[workspace.package]
authors = ["Aidan <aidansullivan.dev@gmail.com"]
edition = "2024"

[workspace.dependencies]
# local
multichain-client = { path = "./multichain-client" }

# crates.io
alloy = { version = "1.0.23", default-features = false }
alloy-chains = { version = "0.2.6", default-features = false }
anyhow = { version = "1.0.98", default-features = false }
axum = { version = "0.8.4", default-features = false }
dotenvy = { version = "0.15.7", default-features = false }
foundry-block-explorers = { version = "0.20.0", default-features = false }
futures = { version = "0.3.31", default-features = false }
serde = { version = "1.0.219", default-features = false }
serde_json = { version = "1.0.141", default-features = false }
tokio = { version = "1.46.1", default-features = false }
tower-http = { version = "0.6.6", default-features = false }
tracing = { version = "0.1.41", default-features = false }
tracing-subscriber = { version = "0.3.19", default-features = false }

[workspace.lints.clippy]
all = { level = "allow", priority = 0 }
bind_instead_of_map = { level = "allow", priority = 2 }              # stylistic
borrowed-box = { level = "allow", priority = 2 }                     # Reasonable to fix this one
complexity = { level = "warn", priority = 1 }
correctness = { level = "warn", priority = 1 }
default_constructed_unit_structs = { level = "allow", priority = 2 } # stylistic
derivable_impls = { level = "allow", priority = 2 }                  # false positives
eq_op = { level = "allow", priority = 2 }                            # In tests we test equality.
erasing_op = { level = "allow", priority = 2 }                       # E.g. 0 * DOLLARS
extra-unused-type-parameters = { level = "allow", priority = 2 }     # stylistic
identity-op = { level = "allow", priority = 2 }                      # One case where we do 0 +
if-same-then-else = { level = "allow", priority = 2 }
needless-lifetimes = { level = "allow", priority = 2 }               # generated code
needless_option_as_deref = { level = "allow", priority = 2 }         # false positives
nonminimal-bool = { level = "allow", priority = 2 }                  # maybe
option-map-unit-fn = { level = "allow", priority = 2 }               # stylistic
stable_sort_primitive = { level = "allow", priority = 2 }            # prefer stable sort
too-many-arguments = { level = "allow", priority = 2 }               # (Turning this on would lead to)
type_complexity = { level = "allow", priority = 2 }                  # raison d'etre
unit_arg = { level = "allow", priority = 2 }                         # stylistic
unnecessary_cast = { level = "allow", priority = 2 }                 # Types may change
useless_conversion = { level = "allow", priority = 2 }               # Types may change
while_immutable_condition = { level = "allow", priority = 2 }        # false positives
zero-prefixed-literal = { level = "allow", priority = 2 }            # 00_1000_000
